#!/usr/bin/env bash
set -euo pipefail

# Quick Migration Setup Script
# This script automates the entire GitLab migration process

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to prompt for input
prompt_input() {
    local prompt="$1"
    local default="$2"
    local var_name="$3"
    
    if [[ -n "$default" ]]; then
        read -p "$prompt [$default]: " input
        if [[ -z "$input" ]]; then
            input="$default"
        fi
    else
        read -p "$prompt: " input
    fi
    
    eval "$var_name=\"$input\""
}

# Function to check requirements
check_requirements() {
    print_status "Checking system requirements..."
    
    local missing_tools=()
    
    if ! command_exists git; then
        missing_tools+=("git")
    fi
    
    if ! command_exists curl; then
        missing_tools+=("curl")
    fi
    
    if ! command_exists jq; then
        missing_tools+=("jq")
    fi
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        print_error "Missing required tools: ${missing_tools[*]}"
        print_status "Installing missing tools..."
        
        if command_exists apt-get; then
            sudo apt-get update
            sudo apt-get install -y "${missing_tools[@]}"
        elif command_exists yum; then
            sudo yum install -y "${missing_tools[@]}"
        elif command_exists brew; then
            brew install "${missing_tools[@]}"
        else
            print_error "Please install the missing tools manually and try again"
            exit 1
        fi
    fi
    
    print_success "All required tools are available"
}

# Function to create environment file
create_env_file() {
    print_status "Setting up environment configuration..."
    
    if [[ -f "gitlab-migration.env" ]]; then
        print_warning "Environment file already exists"
        read -p "Do you want to overwrite it? (y/N): " overwrite
        if [[ ! "$overwrite" =~ ^[Yy]$ ]]; then
            print_status "Using existing environment file"
            return
        fi
    fi
    
    # Prompt for configuration
    prompt_input "Enter your GitHub username" "" "GITHUB_USERNAME"
    prompt_input "Enter your GitLab Personal Access Token" "" "GITLAB_TOKEN"
    prompt_input "Enter your GitHub Personal Access Token (optional)" "" "GITHUB_TOKEN"
    prompt_input "Enter GitLab group name" "limps-suite" "GITLAB_GROUP"
    prompt_input "Enter repository base directory" "~/code" "REPO_BASE_DIR"
    
    # Create environment file
    cat > gitlab-migration.env << EOF
# GitLab Migration Configuration
# Generated by quick-migration-setup.sh

# Your GitHub username
GITHUB_USERNAME="$GITHUB_USERNAME"

# GitLab Personal Access Token
GITLAB_TOKEN="$GITLAB_TOKEN"

# GitHub Personal Access Token (optional but recommended)
GITHUB_TOKEN="$GITHUB_TOKEN"

# GitLab group name
GITLAB_GROUP="$GITLAB_GROUP"

# Repository base directory for local clones
REPO_BASE_DIR="$REPO_BASE_DIR"
EOF
    
    print_success "Environment file created: gitlab-migration.env"
}

# Function to run migration
run_migration() {
    print_status "Starting GitLab migration..."
    
    # Source environment file
    if [[ -f "gitlab-migration.env" ]]; then
        source gitlab-migration.env
    else
        print_error "Environment file not found. Please run setup first."
        exit 1
    fi
    
    # Validate required variables
    if [[ -z "$GITHUB_USERNAME" ]] || [[ -z "$GITLAB_TOKEN" ]]; then
        print_error "Missing required environment variables"
        print_status "Please check gitlab-migration.env"
        exit 1
    fi
    
    # Run the migration script
    if [[ -f "gitlab-migration-setup.sh" ]]; then
        chmod +x gitlab-migration-setup.sh
        ./gitlab-migration-setup.sh
    else
        print_error "Migration script not found: gitlab-migration-setup.sh"
        exit 1
    fi
}

# Function to deploy CI/CD scaffold
deploy_scaffold() {
    print_status "Deploying CI/CD scaffold..."
    
    if [[ -f "deploy-to-repos.sh" ]]; then
        chmod +x deploy-to-repos.sh
        
        # Get repository directory from environment
        if [[ -f "gitlab-migration.env" ]]; then
            source gitlab-migration.env
        fi
        
        local repo_dir="${REPO_BASE_DIR:-~/code}"
        print_status "Using repository directory: $repo_dir"
        
        ./deploy-to-repos.sh "$repo_dir"
    else
        print_error "Deployment script not found: deploy-to-repos.sh"
        exit 1
    fi
}

# Function to show next steps
show_next_steps() {
    echo ""
    echo "=== Migration Setup Complete! ==="
    echo ""
    echo "üìã Next Steps:"
    echo ""
    echo "1. Complete GitHub repository imports:"
    echo "   - Go to each project in GitLab"
    echo "   - Check import status in Settings > General > Advanced"
    echo "   - If imports failed, manually import using 'Repo by URL'"
    echo ""
    echo "2. Configure CI/CD variables:"
    echo "   - Go to your GitLab group > Settings > CI/CD > Variables"
    echo "   - Add your actual values for PYPI_TOKEN, STAGING_URL, etc."
    echo ""
    echo "3. Register GitLab Runners:"
    echo "   - Go to your GitLab group > CI/CD > Runners"
    echo "   - Register Docker runners (or GPU runners if needed)"
    echo ""
    echo "4. Push and merge:"
    echo "   - Push all branches to GitLab"
    echo "   - Create merge requests in the order specified in the guide"
    echo ""
    echo "üåê Your GitLab group:"
    echo "   https://gitlab.com/${GITLAB_GROUP:-limps-suite}"
    echo ""
}

# Main function
main() {
    echo "=== Quick GitLab Migration Setup ==="
    echo "This script will automate your GitLab migration process"
    echo ""
    
    # Check if running in interactive mode
    if [[ ! -t 0 ]]; then
        print_error "This script requires interactive input"
        exit 1
    fi
    
    # Check requirements
    check_requirements
    
    # Create environment file
    create_env_file
    
    # Run migration
    run_migration
    
    # Deploy scaffold
    deploy_scaffold
    
    # Show next steps
    show_next_steps
}

# Show help
show_help() {
    echo "Quick GitLab Migration Setup Script"
    echo ""
    echo "Usage: $0 [OPTION]"
    echo ""
    echo "Options:"
    echo "  -h, --help     Show this help message"
    echo "  --setup-only   Only create environment file"
    echo "  --migrate-only Only run migration (requires env file)"
    echo "  --deploy-only  Only deploy CI/CD scaffold (requires env file)"
    echo ""
    echo "Examples:"
    echo "  $0              # Run complete setup"
    echo "  $0 --setup-only # Only create environment file"
    echo ""
}

# Parse command line arguments
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    --setup-only)
        check_requirements
        create_env_file
        show_next_steps
        exit 0
        ;;
    --migrate-only)
        run_migration
        exit 0
        ;;
    --deploy-only)
        deploy_scaffold
        exit 0
        ;;
    "")
        main
        ;;
    *)
        print_error "Unknown option: $1"
        show_help
        exit 1
        ;;
esac